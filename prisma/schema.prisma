// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Order {
  id        String    @id @default(cuid())
  fid       String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model InviteCode {
  id     String  @id @default(cuid())
  active Boolean @default(true)
  limit  Int     @default(1)
  note   String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  claims User[]
}

model Otp {
  id     String  @id @default(cuid())
  code   String  @unique @default(cuid())
  active Boolean @default(false)
  userId String
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id          String    @id
  name        String
  avatarUrl   String?
  email       String?   @unique
  plan        String    @default("basic")
  planExpiry  DateTime?
  planTokenId String?

  role String @default("user")

  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  moderatedChannels ModeratedChannel[]
  invite            InviteCode?        @relation(fields: [inviteCodeId], references: [id])
  inviteCodeId      String?
  otps              Otp[]
  usage             Usage[]
}

model ModeratedChannel {
  id                String             @id
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  active            Boolean            @default(true)
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  imageUrl          String?
  url               String?
  userId            String
  banThreshold      Int?
  excludeCohosts    Boolean            @default(true)
  excludeUsernames  String             @default("[]")
  ruleSets          RuleSet[]
  moderationLogs    ModerationLog[]
  cooldowns         Cooldown[]
  comods            Comods[]
  usage             Usage[]
  delegates         Delegate[]
  roles             Role[]
  downvotes         Downvote[]
  signerAllocations SignerAllocation[]
}

model Delegate {
  id        String           @id @default(cuid())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  fid       String
  username  String
  avatarUrl String?
  channel   ModeratedChannel @relation(fields: [channelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  channelId String
  role      Role             @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId    String

  @@unique([fid, roleId, channelId])
}

model Role {
  id             String           @id @default(cuid())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  name           String
  description    String?
  channelId      String
  channel        ModeratedChannel @relation(fields: [channelId], references: [id])
  isEveryoneRole Boolean          @default(false)
  isCohostRole   Boolean          @default(false)
  permissions    String
  delegates      Delegate[]
}

model Downvote {
  id        String           @id @default(cuid())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  fid       String
  castHash  String
  username  String
  avatarUrl String?
  channel   ModeratedChannel @relation(fields: [channelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  channelId String

  @@unique([fid, castHash])
}

model Comods {
  id        String           @id @default(cuid())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  fid       String
  username  String
  avatarUrl String?
  channel   ModeratedChannel @relation(fields: [channelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  channelId String

  @@unique([fid, channelId])
}

model RuleSet {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean  @default(true)
  target    String   @default("all")
  rule      String // Stores JSON string of rules
  actions   String // Stores JSON string of actions

  channel   ModeratedChannel @relation(fields: [channelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  channelId String
}

model ModerationLog {
  id                    String           @id @default(cuid())
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  action                String
  reason                String
  castHash              String?
  castText              String?
  actor                 String           @default("system")
  affectedUserFid       String
  affectedUsername      String
  affectedUserAvatarUrl String?
  channel               ModeratedChannel @relation(fields: [channelId], references: [id])
  channelId             String
}

model Status {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  active    Boolean   @default(true)
  message   String
  expiresAt DateTime?
  type      String
}

model Cooldown {
  id             String           @id @default(cuid())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  active         Boolean          @default(true)
  affectedUserId String
  channel        ModeratedChannel @relation(fields: [channelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  channelId      String
  expiresAt      DateTime?

  @@unique([affectedUserId, channelId])
}

model Usage {
  id             String           @id @default(uuid())
  userId         String
  user           User             @relation(fields: [userId], references: [id])
  channel        ModeratedChannel @relation(fields: [channelId], references: [id])
  channelId      String
  castsProcessed Int              @default(0)
  monthYear      String // Format: "MM-YYYY"

  @@unique([channelId, monthYear])
  @@index([channelId, monthYear])
}

model CastLog {
  hash       String   @id
  replyCount Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  status     String
  channelId  String
}

model Signer {
  id          String             @id @default(cuid())
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  active      Boolean            @default(true)
  fid         String
  username    String
  avatarUrl   String
  signerUuid  String
  allocations SignerAllocation[]
}

model SignerAllocation {
  id        String           @id @default(cuid())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  active    Boolean          @default(true)
  signer    Signer           @relation(fields: [signerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  signerId  String
  channel   ModeratedChannel @relation(fields: [channelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  channelId String
}
