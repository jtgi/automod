generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // prod: 10 connections, 30s timeout
  url      = env("DATABASE_URL")
}

model Order {
  id        String    @id @default(cuid())
  fid       String    @unique
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime? @updatedAt @db.Timestamptz(6)
  deletedAt DateTime? @db.Timestamptz(6)
}

model InviteCode {
  id        String    @id @default(cuid())
  active    Boolean   @default(true)
  limit     Int       @default(1)
  note      String?
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime? @updatedAt @db.Timestamptz(6)
  deletedAt DateTime? @db.Timestamptz(6)
  claims    User[]
}

model Otp {
  id        String    @id @default(cuid())
  code      String    @unique @default(cuid())
  active    Boolean   @default(false)
  userId    String
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime? @updatedAt @db.Timestamptz(6)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String             @id
  name              String
  avatarUrl         String?
  email             String?            @unique
  plan              String             @default("basic")
  role              String             @default("user")
  createdAt         DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime?          @updatedAt @db.Timestamptz(6)
  inviteCodeId      String?
  planExpiry        DateTime?          @db.Timestamptz(6)
  planTokenId       String?
  planWalletAddress String?
  moderatedChannels ModeratedChannel[]
  notifications     Notification[]
  otps              Otp[]
  usage             Usage[]
  invite            InviteCode?        @relation(fields: [inviteCodeId], references: [id])
}

model ModeratedChannel {
  id                 String             @id
  createdAt          DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime?          @updatedAt @db.Timestamptz(6)
  active             Boolean            @default(true)
  imageUrl           String?
  url                String?
  feedType           String             @default("custom")
  userId             String
  banThreshold       Int?
  slowModeHours      Int                @default(0)
  excludeCohosts     Boolean            @default(true)
  excludeUsernames   String             @default("[]")
  memberRequirements String?
  inclusionRuleSet   String?
  exclusionRuleSet   String?
  comods             Comods[]
  cooldowns          Cooldown[]
  delegates          Delegate[]
  downvotes          Downvote[]
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  moderationLogs     ModerationLog[]
  roles              Role[]
  signerAllocations  SignerAllocation[]
  usage              Usage[]
}

model Delegate {
  id        String           @id @default(cuid())
  createdAt DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt DateTime?        @updatedAt @db.Timestamptz(6)
  fid       String
  username  String
  avatarUrl String?
  channelId String
  roleId    String
  channel   ModeratedChannel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  role      Role             @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([fid, roleId, channelId])
}

model Role {
  id             String           @id @default(cuid())
  createdAt      DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime?        @updatedAt @db.Timestamptz(6)
  name           String
  description    String?
  channelId      String
  isEveryoneRole Boolean          @default(false)
  isCohostRole   Boolean          @default(false)
  permissions    String
  delegates      Delegate[]
  channel        ModeratedChannel @relation(fields: [channelId], references: [id])
}

model Downvote {
  id        String           @id @default(cuid())
  createdAt DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt DateTime?        @updatedAt @db.Timestamptz(6)
  fid       String
  castHash  String
  username  String
  avatarUrl String?
  channelId String
  channel   ModeratedChannel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@unique([fid, castHash])
}

model Comods {
  id        String           @id @default(cuid())
  createdAt DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt DateTime?        @updatedAt @db.Timestamptz(6)
  fid       String
  username  String
  avatarUrl String?
  channelId String
  channel   ModeratedChannel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@unique([fid, channelId])
}

model ModerationLog {
  id                    String           @id @default(cuid())
  createdAt             DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime?        @updatedAt @db.Timestamptz(6)
  action                String
  reason                String
  castHash              String?
  actor                 String           @default("system")
  affectedUserFid       String
  affectedUsername      String
  affectedUserAvatarUrl String?
  channelId             String
  castText              String?
  channel               ModeratedChannel @relation(fields: [channelId], references: [id])

  @@index([channelId, createdAt])
  @@index([action])
}

model Status {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime? @updatedAt @db.Timestamptz(6)
  active    Boolean   @default(true)
  message   String
  expiresAt DateTime? @db.Timestamptz(6)
  type      String
  link      String?
}

model Cooldown {
  id             String           @id @default(cuid())
  createdAt      DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime?        @updatedAt @db.Timestamptz(6)
  active         Boolean          @default(true)
  affectedUserId String
  channelId      String
  expiresAt      DateTime?        @db.Timestamptz(6)
  channel        ModeratedChannel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@unique([affectedUserId, channelId])
}

model Usage {
  id             String           @id @default(uuid())
  userId         String
  channelId      String
  castsProcessed Int              @default(0)
  monthYear      String
  channel        ModeratedChannel @relation(fields: [channelId], references: [id])
  user           User             @relation(fields: [userId], references: [id])

  @@unique([channelId, monthYear])
  @@index([channelId, monthYear])
}

model CastLog {
  hash       String    @id
  replyCount Int       @default(0)
  createdAt  DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime? @updatedAt @db.Timestamptz(6)
  status     String
  channelId  String
}

model Signer {
  id          String             @id @default(cuid())
  createdAt   DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime?          @updatedAt @db.Timestamptz(6)
  active      Boolean            @default(true)
  fid         String
  username    String
  avatarUrl   String
  signerUuid  String
  allocations SignerAllocation[]
}

model SignerAllocation {
  id        String           @id @default(cuid())
  createdAt DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt DateTime?        @updatedAt @db.Timestamptz(6)
  active    Boolean          @default(true)
  signerId  String
  channelId String
  channel   ModeratedChannel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  signer    Signer           @relation(fields: [signerId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime? @updatedAt @db.Timestamptz(6)
  type      String
  nonce     String
  message   String
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([nonce, userId])
}

model PartnerApiKey {
  id        String   @id @default(cuid())
  key       String   @unique
  name      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PropagationDelayCheck {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  arrivedAt DateTime? @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt
  hash      String
  src       String
  dst       String
}
